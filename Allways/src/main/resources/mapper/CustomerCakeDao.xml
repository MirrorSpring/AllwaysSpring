<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
						
<mapper namespace="com.allways.base.dao.customerCakeDao">

	<select id="CustomerCakeList" resultType="com.allways.base.model.customerCakeDto">
		select cakeId, cakeName, cakePrice, cakeImage, cakeLike, cakeViews from cake
		where cakeDeletedate is null order by ${sort1} ${sort2}
	</select>
	
	<select id="CustomerCakeDetail" resultType="com.allways.base.model.customerCakeDto">
		select cakeId, cakeName, cakePrice, cakeImage, cakeLike, cakeViews, cakeDetail from cake
		where cakeId=#{cakeId};
	</select>
	
	<select id="CustomerCakeOption" resultType="com.allways.base.model.customercakeOptionDto">
		select cakeoptionId, cakeoptionCategory, cakeoptionValue, cakeoptionPrice from cakeoption
		where cakeoptionCategory=#{cakeoptionCategory} and cakeoptionDeletedate is null order by cakeOptionPrice asc;
	</select>
	
	<select id="ShowReview" resultType="com.allways.base.model.customerOrdersReviewDto">
		select * from (select row_number() over(order by oreviewId) as rownum,
		or_customerId, oreviewContent, oreviewInitdate, oreviewImage, oreviewStarrating, or_cakeId from ordersreview  order by oreviewId desc) o
		where o.or_cakeId = #{cakeId} order by o.oreviewInitdate desc;
	</select>
	
	<!-- 케이크 주문 프로세스 시작 -->
	
	<insert id="CustomerAddCart">
		insert into orders (ordersStatus, o_customerId, o_cakeId, o_goodsId, ordersSalePrice, ordersQuantity, ordersDate)
		values (#{ordersStatus}, #{o_customerId}, #{o_cakeId}, 1, #{ordersSalePrice}, #{ordersQuantity}, now());
	</insert>
	
	<select id="GetOrdersId" resultType="int">
		select ordersId from orders where ordersStatus = #{ordersStatus} and o_customerId=#{o_customerId} order by ordersDate desc limit 1;
	</select>
	
	<insert id="CustomerAddDetailOption">
		insert into detailoption
		(d_ordersId, d_cakeoptionId, d_customerId, d_cakeId, d_goodsId, detailoptionLettering, detailoptionPickupDate)
		values
		(#{d_ordersId}, #{d_cakeoptionId}, #{d_customerId}, #{d_cakeId}, #{d_goodsId}, #{detailoptionLettering}, #{detailoptionPickupDate});
	</insert>
	
	<select id="GetOptionPrice" resultType="int">
		select sum(co.cakeoptionPrice) from cake c, cakeoption co, orders o, detailoption d
		where cakeoptionId = d.d_cakeoptionId and c.cakeId = d.d_cakeId and d.d_ordersId = o.ordersId
		and o.ordersStatus = #{ordersStatus} and o.ordersId = #{ordersId} group by o.ordersId, c.cakePrice;
	</select>
	
	<update id="UpdateSalesPrice">
		update orders set ordersSalePrice = #{ordersSalePrice} where ordersId = #{ordersId};
	</update>
	
	<select id="GetCart" resultType="com.allways.base.model.customerOrdersDto">
		select o.ordersId, c.cakeName, o.ordersQuantity, o.ordersSalePrice from cake c, orders o
		where o.o_cakeId = c.cakeId and ordersStatus = '장바구니' and o.o_customerId = #{customerId}
		and ordersPoint is null;
	</select>
	
	<select id="GetCustomerInfo" resultType="com.allways.base.model.customerInfoDto">
		select customerName, customerPhone, customerEmail, customerPostcode, customerAddress, customerAddressDetail
		from customer where customerId=#{customerId};
	</select>
	
	<delete id="DeleteCart">
		delete from orders where ordersId = #{ordersId};
	</delete>
	
	<select id="GetSelectedOrder" resultType="com.allways.base.model.customerOrdersDto">
		select c.cakeId, o.ordersId, c.cakeName, o.ordersQuantity, o.ordersSalePrice from cake c, orders o
		where o.o_cakeId = c.cakeId and ordersStatus = '장바구니' and o.o_customerId = #{customerId}
		and ordersPoint is null and ordersId= #{ordersId};
	</select>
	
	<insert id="OrderCake">
		insert into orders (ordersId, ordersStatus, o_customerId, o_cakeId, o_goodsId, ordersSalePrice, ordersQuantity, ordersPoint, ordersDate)
		values (#{ordersId}, #{ordersStatus}, #{o_customerId}, #{o_cakeId}, 1, #{ordersSalePrice}, #{ordersQuantity}, #{ordersPoint}, now());
	</insert>
	
	<update id="addPoint">
		update orders set ordersPoint=#{ordersPoint} where ordersId=#{ordersId} and ordersStatus='구매';
		
	</update>
	
	<update id="addPoint2">
		update orders set ordersPoint=0 where ordersId=#{ordersId} and ordersStatus='장바구니';
	</update>
	
	<!-- 케이크 주문 프로세스 끝 -->
	
	<select id="ViewOrders" resultType="com.allways.base.model.customerOrdersDto">
		select @rownum:=@rownum+1, o.ordersId, ANY_VALUE(c.cakeName), ANY_VALUE(o.o_customerId), ANY_VALUE(o.ordersSalePrice),
		ANY_VALUE(o.ordersQuantity), ANY_VALUE(o.ordersDate), ANY_VALUE(o_cakeId) from orders o, cake c
		where (@rownum:=0)=0 and o.ordersReviewstatus is null and o.o_customerId = #{customerId} and o.ordersStatus = '구매'
		and o.o_cakeId = c.cakeId group by o.ordersId;
	</select>

</mapper>