<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.allways.base.dao.customerProfileDao">

	<select id="CustomerLogin" resultType="int">
		select count(*) from customer where customerId=#{customerId} and customerPw=#{customerPw} and customerDeletedate is null;
	</select>
	
	<select id="CustomerGetName" resultType="string">
		select customerName from customer where customerId=#{customerId};
	</select>
	
	<select id="CustomerCheckId" resultType="int">
		select count(*) from customer where customerId=#{customerId} and customerDeletedate is null;
	</select>
	
	<insert id="CustomerJoin">
		insert into customer (customerId, customerPw, customerName, customerGender, customerPhone, customerEmail, customerBirthday, customerPostcode, customerAddress, customerAddressDetail, customerInitdate)
		values (#{customerId}, #{customerPw}, #{customerName}, #{customerGender}, #{customerPhone}, #{customerEmail}, #{customerBirthday}, #{customerPostcode}, #{customerAddress}, #{customerAddressDetail}, now())
	</insert>
	
	<select id="CustomerMypage" resultType="com.allways.base.model.customerInfoDto">
		select customerPw, customerName, customerGender, customerPhone, customerBirthday, customerEmail, customerPostcode, customerAddress, customerAddressDetail
		from customer where customerId = #{customerId}
	</select>
	
	<update id="CustomerUpdate">
		update customer set customerPw=#{customerPw}, customerName=#{customerName}, customerGender=#{customerGender},
		customerPhone=#{customerPhone}, customerBirthday=#{customerBirthday}, customerEmail=#{customerEmail}, customerPostcode=#{customerPostcode},
		customerAddress=#{customerAddress}, customerAddressDetail=#{customerAddressDetail}, customerUpdatedate=now() where customerId= #{customerId};
	</update>
	
	<update id="CustomerDelete">
		update customer set customerDeletedate=now() where customerId=#{customerId};
	</update>
	
	<select id="ViewMyOrder" resultType="com.allways.base.model.customerOrdersDto">
		select @rownum:=@rownum+1 as rownum, o.ordersId, ANY_VALUE(c.cakeName) as cakeName,
		ANY_VALUE(o.o_customerId) as o_customerId, ANY_VALUE(o.ordersSalePrice) as ordersSalePrice,
		ANY_VALUE(o.ordersQuantity) as ordersQuantity, ANY_VALUE(o.ordersDate) as ordersDate, ANY_VALUE(o_cakeId) as o_cakeId
		from orders o, cake c where (@rownum:=0)=0 and o.ordersReviewstatus is null and o.o_customerId = #{customerId} and o.ordersStatus = '제작완료'
		and o.o_cakeId = c.cakeId group by o.ordersId;
	</select>
	
	<select id="FindID" resultType="string">
		select customerId from customer where customerName = #{customerName} and customerBirthday = #{customerBirthday}
		and customerPhone = #{customerPhone} and customerEmail = #{customerEmail}  and customerDeletedate is null limit 1;
	</select>
	
	<select id="FindPw" resultType="int">
		select count(*) from customer where customerId=#{customerId} and customerName = #{customerName} and customerBirthday = #{customerBirthday}
		and customerPhone = #{customerPhone} and customerEmail = #{customerEmail}  and customerDeletedate is null limit 1;
	</select>
	
	<update id="ResetPw">
		update customer set customerPw=#{customerPw} where customerId=#{customerId};
	</update>
	
</mapper>