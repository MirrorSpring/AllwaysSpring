<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.allways.base.dao.managerCakeDao">

	<select id="ManagerCakeList" resultType="com.allways.base.model.managerCakeListDto">
		select cakeId, cakeName, cakePrice, cakeViews, cakeLike from cake
		where cakeDeletedate is null and cakeName like #{cakeName} limit #{a}, #{b};
	</select>
	
	<select id="CakeCount" resultType="int">
		select count(*) from cake
		where cakeDeletedate is null and cakeName like #{cakeName}
	</select>
	
	<insert id="ManagerAddCake">
		insert into cake (cakeName, cakePrice, cakeImage, cakeDetail, cakeInitdate, cakeViews, cakeLike)
		values (#{cakeName}, #{cakePrice}, #{cakeImage}, #{cakeDetail}, now(), 0, 0);
	</insert>
	
	<select id="ManagerCheckCakeName" resultType="int">
		select count(*) from cake where cakeName=#{cakeName} and cakeDeleteDate is null;
	</select>
	
	<select id="ManagerViewCakeDetail" resultType="com.allways.base.model.managerCakeDetailDto">
		select cakeName, cakePrice, cakeDetail, cakeImage from cake where cakeName=#{cakeName}
		and cakeDeletedate is null;
	</select>
	
	<update id="ManagerDeleteCake">
		update cake set cakeDeletedate=now() where cakeName=#{cakeName};
	</update>
	
	<update id="ManagerUpdateCake">
		update cake set cakeName=#{cakeName}, cakePrice=#{cakePrice}, cakeDetail=#{cakeDetail}, cakeImage=#{cakeImage}, cakeUpdatedate=now()
		where cakeName=#{cakeOriginalName};
	</update>
	
	<update id="ManagerUpdateCake2">
		update cake set cakeName=#{cakeName}, cakePrice=#{cakePrice}, cakeDetail=#{cakeDetail}, cakeUpdatedate=now()
		where cakeName=#{cakeOriginalName};
	</update>
	
	<select id="ManagerCheckCakeName2" resultType="int">
		select count(*) from cake where cakeName=#{cakeName} and cakeDeleteDate is null and cakeName!=#{cakeOriginalName};
	</select>

</mapper>